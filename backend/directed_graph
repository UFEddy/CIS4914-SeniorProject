import networkx as nx
import numpy as np
import matplotlib.pyplot as plt
from networkx.algorithms.bipartite.basic import color


# Node Superclass
class Node:
    def __init__(self, name, x_global_position, y_global_position, x_velocity, y_velocity,
                 x_acceleration, y_acceleration):
        self.name = name
        self.x_global_position = x_global_position
        self.y_global_position = y_global_position
        self.x_velocity = x_velocity
        self.y_velocity = y_velocity
        self.x_acceleration = x_acceleration
        self.y_acceleration = y_acceleration


# Ego Node Subclass
class EgoNode(Node):
    def __init__(self, name, x_global_position, y_global_position, x_velocity, y_velocity,
                 x_acceleration, y_acceleration, x_angular_rate, y_angular_rate):
        super().__init__(name, x_global_position, y_global_position, x_velocity, y_velocity,
                 x_acceleration, y_acceleration)
        self.x_angular_rate = x_angular_rate
        self.y_angular_rate = y_angular_rate
        self.node_type = 'Ego'


# Agent Node Subclass
class AgentNode(Node):
    def __init__(self, name, x_global_position, y_global_position, x_velocity, y_velocity,
                 x_acceleration, y_acceleration, yaw, category):
        super().__init__(name, x_global_position, y_global_position, x_velocity, y_velocity,
                 x_acceleration, y_acceleration)
        self.yaw = yaw
        self.category = category
        self.node_type = 'Agent'


# Dictionary for agent weights based on their category - Weights are static
agentCategoryToWeightDictionary = {
    'pedestrian' : 1,
    'vehicle' : 5
}

# Dictionary for agent colors - For color_map only
agentColorDictionary = {
    'pedestrian' : 'blue',
    'vehicle' : 'red'
}

# List to hold nodes for all following operations
nodeList = []
# Contains colors for each node
color_map = []


# Creates and returns the directed graph
def createDirectedGraph():
    # TODO - These nodes will want to be from the dataset with all their appropriate values
    Ego = EgoNode('Ego', 10, 10, 0, 0, 0, 0, 0, 0)
    Agent1 = AgentNode('Agent1', 2, 4, 0, 0, 0, 0, 0, 'pedestrian')
    Agent2 = AgentNode('Agent2', 6, 4, 0, 0, 0, 0, 0, 'vehicle')
    # TODO - Don't forget to append the above nodes to the node list
    nodeList.append(Ego)
    nodeList.append(Agent1)
    nodeList.append(Agent2)


    # Initializes directed graph
    directed_graph = nx.DiGraph()
    # Initializes position layout
    pos = nx.spring_layout(directed_graph)

    # Adds node positions and edges
    # TODO - Colors aren't being set to the correct nodes
    for node in nodeList:
        pos[node.name] = np.array([node.x_global_position, node.y_global_position])
        # Only adds edges for agent nodes, as all edges point to the ego node
        if node.node_type == 'Agent':
            directed_graph.add_edge(node.name, 'Ego', weight=agentCategoryToWeightDictionary[node.category])
            color_map.append(agentColorDictionary[node.category])
        else:
            color_map.append('pink')


    # Draws the directed graph
    plt.figure()
    nx.draw(
        directed_graph, pos, edge_color='black', width=1, linewidths=1,
        node_size=500, node_color=color_map, alpha=0.9,
        labels={node: node for node in directed_graph.nodes()}
    )
    # Edge labels
    for node in nodeList:
        pos[node.name] = np.array([node.x_global_position, node.y_global_position])
        if node.name != 'Ego':
            nx.draw_networkx_edge_labels(
                directed_graph, pos,
                edge_labels={(node.name, 'Ego'): 'Weight: ' + str(agentCategoryToWeightDictionary[node.category])}
            )
    plt.axis('off')

    return directed_graph


# Returns the node list of the directed graph
def directedGraphNodeList():
    return nodeList


# Shows the directed graph
def showDirectedGraph():
    plt.show()
